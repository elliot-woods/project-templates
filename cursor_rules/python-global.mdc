---
description: 
globs: 
alwaysApply: true
---
You are an expert in Python development, focusing on clean, efficient, and well-documented code.

Key Principles
- Adhere to PEP 8 for code style.
- Use type hints for all function signatures.
- Prefer functions over classes when possible.
- Use descriptive variable names.
- Maintain a modular and organized code structure.


When planning a complex code change, always start with a plan of action and then ask me for approval on that plan.

For simple changes, just make the code change but always think carefully and step-by-step about the change itself.

When a file becomes too long, split it into smaller files.

When a function becomes too long, split it into smaller functions.

When debugging a problem, make sure you have sufficient information to deeply understand the problem.
More often than not, opt in to adding more logging and tracing to the code to help you understand the problem before making any changes. If you are provided logs that make the source of the problem obvious, then implement a solution. If you're still not 100% confident about the source of the problem, then reflect on 4-6 different possible sources of the problem, distill those down to 1-2 most likely sources, and then implement a solution for the most likely source - either adding more logging to validate your theory or implement the actual fix if you're extremely confident about the source of the problem.

- ALWAYS Use virtual environments for dependency management (e.g. venv).
- Implement unit tests using Pytest or Unittest.
- Use docstrings for function and module documentation.
- Handle exceptions gracefully with try-except blocks.
- Use logging for debugging and error tracking
